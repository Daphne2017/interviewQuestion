

两次握手：
浏览器（发送A包给服务器请求连接）：嘿，服务器老兄，我想要跟你连接通行不行？行的话请回复，不行就不用回复了。=>第一次握手。
服务器回复（A1包）：行行行，都老基友了，允许连通。（这时候连接已连通，服务器开始等待浏览器发送请求）=>第二次握手 （连接已连通）。
浏览器（收到A1包后，知道了服务器已经允许连通连接，边发请求了）：老兄，这是我的第一个请求开始咯。
服务器（收到请求后响应给浏览器）：好滴，已接受请求，响应你啦，返回给你要的资源了。
浏览器（拿到资源后，想断开连接）：老兄，资源我已经拿到啦，我要断开连接咯 =>四次挥手开始。
服务器：好滴……()

设想有以下情况的两次握手：

比如浏览器要连到服务器，浏览器发送连接的信息（A包）由于网络不通畅的问题，无法送达到服务器。
于是，于是浏览器又发了一次连接信息（A1包），结果这次服务器收到了，于是就发信息回来，两机就连接。

浏览器（发送A包给服务器请求连接）：嘿，服务器老兄，我想要跟你连接通行不行？行的话请回复，不行就不用回复了。=>第一次握手。
（由于网络不通畅的问题，浏览器的发的A包迟迟不能送达到服务器那边。浏览器一直没收到服务器的回复就认为，服务器不想跟他连接，连接失败，于是浏览器就清除了A包！于是浏览器又来一次）。
这时候网络好了：
浏览器（发送B包给服务器请求连接）：嘿，服务器老兄，我想要跟你连接通行不行？行的话请回复，不行就不用回复了。=>第一次握手。
服务器回复（B1包）：行行行，都老基友了，允许连通。（这时候连接已连通，服务器开始等待浏览器发送请求）=>第二次握手 （连接已连通）。
浏览器（收到B1包后，知道了服务器已经允许连通连接，边发请求了）：老兄，这是我的第一个请求开始咯。
服务器（收到请求后响应给浏览器）：好滴，已接受请求，响应你啦，返回给你要的资源了。
浏览器（拿到资源后，想断开连接）：老兄，资源我已经拿到啦，我要断开连接咯 =>四次挥手开始。
……
服务器：好滴（连接断开）

刚断了连接没多久，这时候服务器接收到了浏览器第一次要求连接的A包信息，于是服务器回复如下：
服务器回复（A1包）：行行行，都老基友了，允许连通。（这时候连接已连通，服务器开始等待浏览器发送请求）=>第二次握手 （连接已连通）。
浏览器这时候因为在第一次发送A包请求的时候，等了很久服务器都没回应，他清除了A包，所以就算后来服务器回应他一个A1确认包，他都不要了，直接丢弃掉。
由于是两次握手，他没有必要再回复服务器，我不会再发请求来了。
这时候，服务器就心里想，妈的，都回复你一个A1确认包了，你到底还发不发请求来的，要我一直等你，浪费我的精力。服务器他就会一直等待。


如果以上情况是三次握手：
情况一：这时候，服务器就心里想，妈的，都回复你一个A1确认包了，你到底还发不发请求来的，再等一会不回复，我就关闭连接。如果浏览器还是不回复。这就还是两次握手。
但是服务器不会再等下去了。会关闭连接。（因为规定是要三次握手才会保持连接）。

情况二：这时候，服务器就心里想，妈的，都回复你一个A1确认包了，你到底还发不发请求来的，再等一会不回复，我就关闭连接。如果浏览器最后回复了。这就是三次握手。
那服务器还是会保持连接，等待浏览器发送请求来。






