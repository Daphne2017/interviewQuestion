

首先是第一个：

在学邦公司做过一个名师和大山项目：这两个项目最开始启动的时候都是在一个基于sassBoss平台的基础上开发的。
也就是说，三个项目共用一份前端代码。但是，每个项目他有自己的个性化定制需求。这个时候就需要给每一个共用的html页面动态引进每个项目个性化的html和js处理逻辑了。
我当时想了挺久的，当时的做法就是让后端返回一个判断不同项目的一个机构唯一id，然后写了一份公用的js文件；
这个公用文件就是根据机构id利用路径去匹配请求不同项目需要加载的个性化html和js文件。但是这样动态的去加载js和html，属于异步请求，又会导致页面某些字段无法回显的问题。
最后只能是在公共js文件里，又加了个回调函数，等动态加载的html和js请求完成后，再执行回调函数。回调函数主要就是执行就是共用页面的公共js逻辑。

第二个是：

1、在道一云做党建项目的时候，有一个12371党员咨询服务的需求，是根据当前登录人的身份级别，来过滤可选的省市区镇街的五级联动，因为pc端和移动端用组件的数据结构 也不一样。
当时花了挺长的一段时间去写这个递归的方法。
最后是结合es6的解构去递归解决的
2、在移动端的时候，表单输入框获取焦点后被调起的键盘遮挡住了。
在设计上解决这个问题，不让输入框位于半屏下。万能的传送门：http://my.oschina.net/cjlice/blog/625526
focus时让页面滚上去，让输入框露出

3、输入框，获取焦点后，键盘调起，表单自动滑到了底部。？凡是有input的地方，都弹起一个新视图。当输入框获得焦点时，重新修改按钮样式：{position,'static'}，当输入框获得焦点时，样式恢复。

4、使用自定义指令的时候
bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。

inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。

update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。
1、新建指令设计不完善，没有考虑状态变更
「由于之前的业务相对常规，没有遇到过大的困难，但是也比较期待再今后工作中遇到一些难题，因为这样才会有成长。」


